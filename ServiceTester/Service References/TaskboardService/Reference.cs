//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTester.TaskboardService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskboardService.ITaskboardService")]
    public interface ITaskboardService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/CreateStory", ReplyAction="http://tempuri.org/ITaskboardService/CreateStoryResponse")]
        ServiceDataTypes.Story CreateStory(ServiceDataTypes.Story story);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/DeleteStory", ReplyAction="http://tempuri.org/ITaskboardService/DeleteStoryResponse")]
        bool DeleteStory(int storyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/GetStoryByID", ReplyAction="http://tempuri.org/ITaskboardService/GetStoryByIDResponse")]
        ServiceDataTypes.Story GetStoryByID(int storyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/UpdateStory", ReplyAction="http://tempuri.org/ITaskboardService/UpdateStoryResponse")]
        ServiceDataTypes.Story UpdateStory(ServiceDataTypes.Story person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/CreateTask", ReplyAction="http://tempuri.org/ITaskboardService/CreateTaskResponse")]
        ServiceDataTypes.Task CreateTask(ServiceDataTypes.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/DeleteTask", ReplyAction="http://tempuri.org/ITaskboardService/DeleteTaskResponse")]
        bool DeleteTask(int taskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/GetTaskByID", ReplyAction="http://tempuri.org/ITaskboardService/GetTaskByIDResponse")]
        ServiceDataTypes.Task GetTaskByID(int taskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/UpdateTask", ReplyAction="http://tempuri.org/ITaskboardService/UpdateTaskResponse")]
        ServiceDataTypes.Task UpdateTask(ServiceDataTypes.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskboardService/InsertWorkTime", ReplyAction="http://tempuri.org/ITaskboardService/InsertWorkTimeResponse")]
        bool InsertWorkTime(int userID, int taskID, double spentTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskboardServiceChannel : ServiceTester.TaskboardService.ITaskboardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskboardServiceClient : System.ServiceModel.ClientBase<ServiceTester.TaskboardService.ITaskboardService>, ServiceTester.TaskboardService.ITaskboardService {
        
        public TaskboardServiceClient() {
        }
        
        public TaskboardServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskboardServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskboardServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskboardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceDataTypes.Story CreateStory(ServiceDataTypes.Story story) {
            return base.Channel.CreateStory(story);
        }
        
        public bool DeleteStory(int storyID) {
            return base.Channel.DeleteStory(storyID);
        }
        
        public ServiceDataTypes.Story GetStoryByID(int storyID) {
            return base.Channel.GetStoryByID(storyID);
        }
        
        public ServiceDataTypes.Story UpdateStory(ServiceDataTypes.Story person) {
            return base.Channel.UpdateStory(person);
        }
        
        public ServiceDataTypes.Task CreateTask(ServiceDataTypes.Task task) {
            return base.Channel.CreateTask(task);
        }
        
        public bool DeleteTask(int taskID) {
            return base.Channel.DeleteTask(taskID);
        }
        
        public ServiceDataTypes.Task GetTaskByID(int taskID) {
            return base.Channel.GetTaskByID(taskID);
        }
        
        public ServiceDataTypes.Task UpdateTask(ServiceDataTypes.Task task) {
            return base.Channel.UpdateTask(task);
        }
        
        public bool InsertWorkTime(int userID, int taskID, double spentTime) {
            return base.Channel.InsertWorkTime(userID, taskID, spentTime);
        }
    }
}
